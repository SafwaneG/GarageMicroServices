# Define a 'Persistent Volume Claim' (PVC) for MongoDB storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: mongo
    tier: database
spec:
  accessModes:
    - ReadWriteOnce # Specifies the access mode for the claim
  resources:
    requests:
      storage: 1Gi # Storage size for MongoDB
---
# Configure 'Deployment' for MongoDB server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  labels:
    app: mongo
    tier: database
spec:
  selector: # MongoDB Pod should contain matching labels
    matchLabels:
      app: mongo
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mongo
        tier: database
    spec:
      containers:
        - image: mongo:5.0 # MongoDB image from Docker Hub
          name: mongo
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: root
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: root
            - name: MONGO_INITDB_DATABASE
              value: clientDb
          ports:
            - containerPort: 27017
              name: mongo
          volumeMounts: # Mounting volume obtained from Persistent Volume Claim
            - name: mongo-persistent-storage
              mountPath: /data/db # Path in the container for database storage
      volumes:
        - name: mongo-persistent-storage # Obtain volume from PVC
          persistentVolumeClaim:
            claimName: mongo-pv-claim
---
# Define a 'Service' to expose MongoDB to other services
apiVersion: v1
kind: Service
metadata:
  name: mongo # DNS name
  labels:
    app: mongo
    tier: database
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector: # MongoDB Pod should contain matching labels
    app: mongo
    tier: database
  clusterIP: None # Use DNS, so ClusterIP is not relevant
